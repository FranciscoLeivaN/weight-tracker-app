name: Pruebas E2E con Cypress

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

# Este workflow ejecuta las pruebas E2E con Cypress
# - Pruebas E2E: weightTracker.cy.js
# - Pruebas de rendimiento: performance.cy.js (con umbrales especialmente adaptados para CI)

jobs:
  e2e-tests:
    name: Ejecutar pruebas E2E
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      # Iniciar el servidor de desarrollo en segundo plano y guardar PID
      - name: Start development server
        run: |
          npm start &
          echo $! > server.pid
          echo "Servidor iniciado con PID: $(cat server.pid)"
        env:
          CI: true
          NODE_ENV: test
          
      # Esperar a que el servidor est√© listo (versi√≥n optimizada)
      - name: Wait for server to be ready
        run: |
          echo "Esperando a que el servidor est√© listo en http://localhost:3000..."
          timeout=180
          counter=0
          
          until curl --output /dev/null --silent --head --fail http://localhost:3000; do
            if [ $counter -ge $timeout ]; then
              echo "Error: El servidor no respondi√≥ despu√©s de $timeout segundos"
              echo "Verificando procesos activos:"
              ps aux | grep node || true
              echo "Logs del servidor (si est√°n disponibles):"
              tail -50 server.log 2>/dev/null || echo "No hay logs disponibles"
              exit 1
            fi
            
            echo "Esperando... (intento $((counter/5 + 1)), $((timeout - counter)) segundos restantes)"
            sleep 5
            counter=$((counter + 5))
          done
          
          echo "¬°Servidor listo y respondiendo!"
          
      # Verificar que el servidor est√© funcionando correctamente
      - name: Health check
        run: |
          echo "Verificando estado del servidor:"
          curl -I http://localhost:3000 || true
          echo "PID del servidor: $(cat server.pid)"
          ps -p $(cat server.pid) || echo "Proceso del servidor no encontrado"

      # Ejecutar pruebas E2E
      - name: Run E2E tests
        run: |
          echo "Ejecutando pruebas E2E (weightTracker.cy.js)..."
          npx cypress run \
            --spec "cypress/e2e/weightTracker.cy.js" \
            --browser chrome \
            --config video=true,videoCompression=false,screenshotOnRunFailure=true
        env:
          CI: true
          CYPRESS_baseUrl: http://localhost:3000
          ELECTRON_EXTRA_LAUNCH_ARGS: "--disable-gpu"
          CYPRESS_CHROME_ARGS: "--no-sandbox,--disable-gpu,--disable-dev-shm-usage,--disable-setuid-sandbox,--no-first-run,--disable-extensions"

      # Ejecutar pruebas de rendimiento
      - name: Run performance tests
        run: |
          echo "Ejecutando pruebas de rendimiento (performance.cy.js)..."
          npx cypress run \
            --spec "cypress/e2e/performance.cy.js" \
            --browser chrome \
            --config video=true,videoCompression=false,screenshotOnRunFailure=true,defaultCommandTimeout=30000,pageLoadTimeout=180000
        env:
          CI: true
          CYPRESS_baseUrl: http://localhost:3000
          # Variables espec√≠ficas para Lighthouse
          LIGHTHOUSE_CHROME_FLAGS: "--headless --no-sandbox --disable-gpu --disable-dev-shm-usage --remote-debugging-port=9222 --remote-debugging-address=127.0.0.1"
          # Forzar IPv4 y puerto espec√≠fico
          CYPRESS_lighthouse_port: 9222
          CYPRESS_lighthouse_hostname: "127.0.0.1"
          # Configuraci√≥n de Chrome
          ELECTRON_EXTRA_LAUNCH_ARGS: "--disable-gpu --no-sandbox"
          CYPRESS_CHROME_ARGS: "--no-sandbox,--disable-gpu,--disable-dev-shm-usage,--disable-setuid-sandbox,--no-first-run,--disable-extensions,--remote-debugging-port=9222,--remote-debugging-address=127.0.0.1"

      # Verificar archivos generados
      - name: Check generated files
        if: always()
        run: |
          echo "Listando archivos generados..."
          
          echo "Estructura del directorio cypress:"
          find cypress -type d | sort
          
          echo "Videos encontrados:"
          find cypress -type f -name "*.mp4" | wc -l
          find cypress -type f -name "*.mp4" | xargs -I{} ls -la {} 2>/dev/null || echo "No se encontraron videos"
          
          echo "Capturas de pantalla:"
          find cypress -type f -name "*.png" | wc -l
          
      # Almacenar resultados como artefactos
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results-${{ github.run_number }}
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/results/
            .cypress-audit/
          retention-days: 5
          
      # Generar informe de pruebas
      - name: Generate test report
        if: always()
        run: |
          echo "## üìä Resultados de Pruebas E2E" > test-report.md
          echo "**Fecha:** $(date)" >> test-report.md
          echo "**Commit:** ${{ github.sha }}" >> test-report.md
          echo "**Rama:** ${{ github.ref_name }}" >> test-report.md
          echo "" >> test-report.md
          
          echo "### ‚úÖ Pruebas Ejecutadas" >> test-report.md
          echo "- **E2E:** weightTracker.cy.js" >> test-report.md
          echo "- **Rendimiento:** performance.cy.js" >> test-report.md
          echo "" >> test-report.md
          
          echo "### üìπ Videos Generados" >> test-report.md
          find cypress/videos -type f -name "*.mp4" 2>/dev/null | sort | sed 's/^/- /' >> test-report.md
          echo "" >> test-report.md
          
          echo "### üì∏ Capturas de Pantalla" >> test-report.md
          find cypress/screenshots -type f -name "*.png" 2>/dev/null | sort | sed 's/^/- /' >> test-report.md || echo "- Ninguna (todas las pruebas pasaron)" >> test-report.md
          
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-${{ github.run_number }}
          path: test-report.md
          
      # Limpieza mejorada de procesos
      - name: Clean up processes
        if: always()
        run: |
          echo "üßπ Limpiando procesos en segundo plano..."
          
          # Matar proceso por PID si existe
          if [ -f server.pid ]; then
            PID=$(cat server.pid)
            echo "Matando proceso con PID: $PID"
            kill $PID 2>/dev/null || echo "Proceso $PID ya no existe"
            rm server.pid
          fi
          
          # Matar procesos por patr√≥n como respaldo
          pkill -f "npm start" || true
          pkill -f "node.*start" || true
          
          # Verificar que no queden procesos
          echo "Procesos Node.js restantes:"
          ps aux | grep node | grep -v grep || echo "‚úÖ No hay procesos Node.js activos"
          
          echo "üèÅ Limpieza completada"