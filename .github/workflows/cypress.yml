name: Pruebas E2E con Cypress

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

# Este workflow ejecuta las pruebas E2E con Cypress
# - Pruebas E2E: weightTracker.cy.js
# - Pruebas de rendimiento: performance.cy.js (con umbrales especialmente adaptados para CI)
# IMPORTANTE: El archivo performance-ci-skip.cy.js ya no se usa.
# Las pruebas unitarias se ejecutan por separado en unit-tests.yml

jobs:
  e2e-tests:
    name: Ejecutar pruebas E2E
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      # Iniciar el servidor de desarrollo en segundo plano
      - name: Start development server
        run: npm start &
        env:
          CI: true
          
      # Esperar a que el servidor esté listo
      - name: Wait for server to be ready
        run: |
          echo "Esperando a que el servidor esté listo en http://localhost:3000..."
          # Usar curl para esperar hasta que el servidor responda
          timeout=180
          until $(curl --output /dev/null --silent --head --fail http://localhost:3000) || [ $timeout -le 0 ]; do
            echo "Esperando... ($timeout segundos restantes)"
            sleep 5
            timeout=$((timeout - 5))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Error: El servidor no respondió a tiempo"
            exit 1
          else
            echo "¡Servidor listo!"
          fi

      # Ejecutar todas las pruebas Cypress secuencialmente
      - name: Run all Cypress tests
        run: |
          echo "Ejecutando pruebas E2E..."
          npx cypress run --spec "cypress/e2e/weightTracker.cy.js" --browser chrome --config video=true,videoCompression=false,screenshotOnRunFailure=true
          
          echo "Ejecutando pruebas de rendimiento..."
          npx cypress run --spec "cypress/e2e/performance.cy.js" --browser chrome --config video=true,videoCompression=false,screenshotOnRunFailure=true,defaultCommandTimeout=30000,pageLoadTimeout=180000
        env:
          CI: true
          CYPRESS_baseUrl: http://localhost:3000
          # Configuraciones específicas para CI
          ELECTRON_EXTRA_LAUNCH_ARGS: "--disable-gpu"
          CYPRESS_CHROME_ARGS: "--no-sandbox,--disable-gpu,--disable-dev-shm-usage,--disable-setuid-sandbox,--no-first-run,--disable-extensions"

      # Verificar si los videos están siendo generados
      - name: Check generated files
        if: always()
        run: |
          echo "Listando archivos generados..."
          
          # Mostrar estructura de directorios
          echo "Estructura del directorio cypress:"
          find cypress -type d | sort
          
          # Contar y listar videos
          echo "Videos encontrados:"
          find cypress -type f -name "*.mp4" | wc -l
          find cypress -type f -name "*.mp4" | xargs -I{} ls -la {} 2>/dev/null || echo "No se encontraron videos"
          
          # Verificar permisos
          echo "Permisos del directorio de videos:"
          ls -la cypress/videos/ || echo "Directorio no encontrado"
          
      # Almacenamos los resultados como artefactos
      - name: Upload all test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-all-results
          path: |
            cypress/videos/
            cypress/screenshots/
            cypress/results/
            .cypress-audit/
          retention-days: 5
          
      # Generar un informe detallado de pruebas
      - name: Generate detailed test report
        if: always()
        run: |
          echo "## Resultados detallados de las pruebas" > test-report.md
          echo "### Fecha y hora: $(date)" >> test-report.md
          echo "" >> test-report.md
          
          echo "### Pruebas E2E" >> test-report.md
          echo "- Archivo: weightTracker.cy.js" >> test-report.md
          echo "" >> test-report.md
          
          echo "### Pruebas de Rendimiento" >> test-report.md
          echo "- Archivo: performance.cy.js" >> test-report.md
          echo "" >> test-report.md
          
          echo "### Videos generados:" >> test-report.md
          find cypress/videos -type f | sort >> test-report.md
          echo "" >> test-report.md
          
          echo "### Capturas de pantalla (si existen):" >> test-report.md
          find cypress/screenshots -type f 2>/dev/null | sort >> test-report.md
          
      # Subir el informe como artefacto
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md
          
      # Asegurarse de que todos los procesos en segundo plano se cierren
      - name: Clean up background processes
        if: always()
        run: |
          echo "Cerrando procesos en segundo plano..."
          pkill -f "node.*start" || true
          echo "Procesos Node.js activos:"
          ps aux | grep node || true
